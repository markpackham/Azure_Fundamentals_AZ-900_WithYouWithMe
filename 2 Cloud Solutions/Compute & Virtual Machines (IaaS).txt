What is 'Compute'?

The term 'compute' simply refers to the on-demand use or provisioning of typical computing resources, such as disks, processors, memory and operating systems. 

This term is used interchangably across most cloud providers, including Azure, Amazon Web Services (AWS) and Google Cloud Platform (GCP).


Virtual Machines (IaaS - Infrastructure as a Service)

One of the most common types of compute service across all cloud providers is the virtual machine, or "VM".

This is a virtualised server. You choose:

The operating system (Linux or Windows)
Size of the resources
Disk
Memory
CPU 
Later in the course, you'll see how this works by getting hands-on with Azure's Virtual Machine Service.


Lift and shift

In the early days of cloud services, most established organizations were cautious in their adoption of cloud. The simplest way for them to get started, with minimal risk, was by utilizing a 'Lift and shift' approach.

'Lift and shift' refers to migrating a physical server(s) into a cloud platform, such as Azure. 

In other words, it's replacing a physical on-premises server with a virtual server in the cloud provider's datacentre.



Azure Virtual Machines are an ideal choice when you need:

Total control over the operating system (OS)

The ability to run custom software

To use custom hosting configurations


Why would you use Azure Virtual Machines?

1 During testing and development: VMs provide a quick and easy way to create different OS and application configurations. Test and development personnel can then easily delete the VMs when they no longer need them. 

2 When running applications in the cloud: The ability to run certain applications in the public cloud as opposed to creating a traditional infrastructure to run them can provide substantial economic benefits. For example, an application might need to handle fluctuations in demand. Shutting down VMs when you don't need them or quickly starting them up to meet a sudden increase in demand means you pay only for the resources you use.

3 When extending your datacentre to the cloud: An organization can extend the capabilities of its own on-premises network by creating a virtual network in Azure and adding VMs to that virtual network.

4 During disaster recovery: By extending an on-premises network to the cloud, you can get significant cost savings by using an IaaS-based approach to disaster recovery. If a primary datacenter fails, you can create VMs running on Azure to run your critical applications and then shut them down when the primary datacenter becomes operational again.


Application Services (PaaS) PLATFORM AS A SERVICE!!!!

One of the major drawbacks of provsioning a Virtual Machine can be the fact that you need to provision, manage and maintain most of the components of the server, including the performance, operating system, security and application patching and the disk space.

Say, for example, you have an application which runs a NodeJS website, which was developed and maintained by your in-house team of java web developers. 

What if they don't have the expertise or capacity manage the underlying Linux operating system?
This type of use case has been solved by cloud providers by offering Application services whereby the provider manages the virtual machine, the operating system and the dependencies,
All you have to do is determine which application code your ennvironment needs to be built on, such as .Net, Java, Node, PHP, Ruby or Python.
Application Services in Azure


Azure App Service enables you to build and host web apps, background jobs, mobile back-ends, and RESTful APIs in the programming language of your choice without managing infrastructure 


Why would you use Azure App Services?

The most common use-case for selecting Azure App service will be based on your application having one or more of the following features:


1 Web apps: App Service includes full support for hosting web apps by using ASP.NET, ASP.NET Core, Java, Ruby, Node.js, PHP, or Python. You can choose either Windows or Linux as the host operating system. 


2 API apps: Much like hosting a website, you can build REST-based web APIs by using your choice of language and framework. You get full Swagger support and the ability to package and publish your API in Azure Marketplace. The produced apps can be consumed from any HTTP- or HTTPS-based client. 

3 WebJobs: You can use the WebJobs feature to run a program (.exe, Java, PHP, Python, or Node.js) or script (.cmd, .bat, PowerShell, or Bash) in the same context as a web app, API app, or mobile app. They can be scheduled or run by a trigger. WebJobs are often used to run background tasks as part of your application logic. 

4 Mobile apps: Use the Mobile Apps feature of App Service to quickly build a back end for iOS and Android apps. With just a few clicks in the Azure portal, you can:

Store mobile app data in a cloud-based SQL database.

Authenticate customers against common social providers, such as MSA, Google, Twitter, and Facebook.

Send push notifications.

Execute custom back-end logic in C# or Node.js.



Containers (PaaS)

One of the most common ways in which businesses develop and deploy their applications today is by using a container.

A container can be described as a virtualised instance of the application and its underlying runtime binaries and dependencies. 

Containers are typically associated with the cloud architecture, known as a microservice architecture.

Containers vs VMs

While the VM allows you to run multiple applications with varying operating systems on the same host, it still requires an operating system to be installed.

The Container, on the other hand only virtualizes the operating system (typically Linux) and only includes the application and its libraries.
This makes it much more lightweight, making it faster to deploy, move and scale.
The most popular container tool used today is Docker.



What is a microservice architecture?

This architecture is where you break solutions into smaller, independent pieces. For example, you might split a website into a container hosting your front end, another hosting your back end, and a third for storage. This split allows you to separate portions of your app into logical sections that can be maintained, scaled, or updated independently.

Imagine your website back-end has reached capacity but the front end and storage aren't being stressed. You could:

Scale the back end separately to improve performance.

Decide to use a different storage service.

Replace the storage container without affecting the rest of the application.


Kubernetes is classified as an " an open source container orchestration platform that automates deployment, management and scaling of applications ." 

Being a fundamentals course, we're not going to be going too far into the technical configuration of containers or Kubernetes, however the best way to think of what solution is provides - it helps you manage and maintain your containers in one single platform.


Why would you use Azure containers?

Containers are often used to create solutions using a microservice architecture.

Apart from aligning to the microservices framework, there are some other valid reasons as to why you would want to use a container service for your cloud solution. This might include:

1 Minimise operating costs: While virtual machines are an excellent way to reduce costs versus the investments that are necessary for physical hardware, they're still limited to a single operating system per virtual machine. 

2 Hosting flexibility and portability: If you want to run multiple instances of an application on a single host machine, containers are an excellent choice.



Functions (FaaS) FUNCTIONS AS A SERVICE

This type of service allows you to execute code in response to events without the complex infrastructure typically associated with building and launching microservices applications. 

To put this into context, let's say you are running a website that hosts a number of on-demand video files, which only need to play when then the user clicks on the link (sound familiar?).

If this was to be hosted on one or more VMs or containers, you would need to ensure that your website and the video file are ready at any time. This could become expensive, and you will be paying for the underlying resources whether your users click on the video or not!

In order to solve this problem, there is a compute service available which only provisions the resources it needs at the time it needs to! 

This is sometimes referred to as an event-driven service, i.e. it waits until an event (clicking a link) occurs before it provisions the resources needed.

Coming back to your video website scenario, to reduce your operating expenses you could: 

"Decouple" your web service from your video service
Create a function (using python or java code) to transcode and stream the video when the user clicks on the link.
Now you're only paying for the website resources, however, you're not paying for the video streaming/transcoding service 24/7. You will only pay for the resources when the user actually watches the video.


Why would you use Azure Functions?

With the Azure Functions service, you can host a single method or function by using a popular programming language in the cloud that runs in response to an event. 

Some reasons as to why you would want to us an Azure Function might be to:

1 Focus on the code: You're concerned only with the code (Python/JavaScript etc) that's running your service and not the underlying platform or infrastructure 

2 Listen for specific events: For example, if your application needs to perform work in response to an event via a REST request, timer, or message from another Azure service.


Workstations (DaaS) DESKTOP AS A SERVICE

This type of computer service is probably the most simple to describe and understand, in that it provides access to a standard desktop environment, such as Windows or Linux.

While it has been offered in many different forms over the last few years, it is becoming more relevant for the modern workforce with remote staff, and provisioning a virtual desktop environment allows organisations to be more agile in providing staff with the applications they need, only when they need them!

Having a virtualized desktop provides the following benefits:

Cost Savings: No CapEx requirements on purchase of laptop or desktop devices.
Speed to provision: Organisations no longer need to maintain a pool of hardware assets to give to new employees or replacements for failed/end of life devices.
Software is 'pay-as-you-go': This means that the cost of the license is built into the running cost, so you don't have to commit to lengthy and expensive software licences.
Consolidated Management: With your desktop environment in the cloud, your support admins can manage all your devices in a single management console. This makes it easy to centrally manage software patches, operating system updates and more.
Workstations in Azure


Azure Virtual Desktop is a desktop and application virtualization service that runs on the cloud. It enables your users to use a cloud-hosted version of Windows from any location. 


Why would you use Azure Virtual Desktop?

The popularity of these types of DaaS services are becoming more popular as organisations adapt to an increase in remote workers.

Here are some additional reasons as to why your solution might want to include Azure Virtual Desktop:


1 Just-in-time access: Your users have the freedom to connect to Azure Virtual Desktop with any device over the internet

2 Custom role-based environments: You can provide individual ownership through personal (persistent) desktops. For example, you might want to provide personal remote desktops for members of an engineering team. Then they can add or remove programs without impacting other users on that remote desktop. 

3 Enhance security:  Azure Virtual Desktop provides:

Centralized security management for users' desktops with Azure Active Directory (Azure AD) 
Azure Virtual Desktop also improves security by using reverse connect technology. This connection type is more secure than the Remote Desktop Protocol.